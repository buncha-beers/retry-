<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Buncha Beers Pod ‚Äî Private Preview</title>
<style>
:root { --bg:#0b0b0c; --card:#141417; --text:#f6f6f7; --muted:#a3a3ac; --accent:#F9B233; --accent2:#06b6d4; }
*{box-sizing:border-box} html,body{height:100%}
body{margin:0;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,sans-serif;color:var(--text);
background:radial-gradient(1200px 800px at 20% -10%, #1b1b20 0%, #0b0b0c 60%);}
.container{max-width:1000px;margin:0 auto;padding:28px 16px 60px}
.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:16px}
.logo{display:flex;align-items:center;gap:10px}
.logo .dot{width:28px;height:28px;border-radius:8px;background:#111217;display:grid;place-items:center;box-shadow:0 0 0 1px #24242a inset}
.logo .dot:before{content:"üç∫"} .logo span{font-weight:800;letter-spacing:.5px;font-size:22px}
.badge{padding:6px 10px;border-radius:999px;background:#1f1f24;color:var(--muted);font-size:12px;border:1px solid #2b2b31}
.card{background:linear-gradient(180deg,#15151a 0%,#0f0f13 100%);border:1px solid #24242a;border-radius:16px;padding:20px;box-shadow:0 10px 30px rgba(0,0,0,.25)}
.row{display:flex;gap:12px;flex-wrap:wrap}
.input,.select,.textarea,.button{border-radius:12px;border:1px solid #2b2b31;background:#131318;color:var(--text);padding:12px 14px;font-size:14px}
.textarea{min-height:96px;resize:vertical;width:100%}
.button{cursor:pointer;font-weight:700;letter-spacing:.3px;background:linear-gradient(180deg,#F9B233,#c98505);border:none;color:#2a1900;box-shadow:0 6px 18px rgba(249,178,51,.35)}
.button.secondary{background:#16161b;color:var(--muted);border:1px solid #2b2b31;box-shadow:none}
.toggle{display:flex;gap:10px;background:#141419;border:1px solid #24242a;border-radius:12px;padding:6px}
.toggle button{flex:1;padding:10px 12px;border-radius:8px;background:transparent;color:var(--muted);border:none;cursor:pointer}
.toggle button.active{background:#1d1d23;color:var(--text);border:1px solid #2b2b31}
.grid{display:grid;grid-template-columns:1fr;gap:16px}
@media(min-width:900px){.grid{grid-template-columns:1fr 1fr}}
.preview{display:flex;align-items:center;justify-content:center;aspect-ratio:9/16;border-radius:16px;background:#0c0c10;border:1px dashed #2b2b31;color:var(--muted);font-weight:600;text-align:center;padding:18px}
pre{white-space:pre-wrap;word-break:break-word;margin:0}
.small{font-size:12px;color:var(--muted)} .audio-row{display:flex;gap:12px;align-items:center;margin-top:10px}
</style>
</head>
<body>
<main class="container">
  <header class="header">
    <div class="logo"><div class="dot"></div><span>Buncha Beers Pod</span></div>
    <span class="badge">Private Preview</span>
  </header>

  <section class="card">
    <div class="row" style="align-items:center;justify-content:space-between">
      <strong>Generator</strong>
      <span class="small">Animated/Realistic is a style toggle; both produce the same script here.</span>
    </div>

    <label>Topic</label>
    <textarea id="topic" class="textarea">Is cancel culture real or just internet hangovers?</textarea>

    <div class="row" style="margin-top:10px">
      <div class="toggle" role="tablist" aria-label="Mode">
        <button id="btn-animated" class="active" type="button">Animated</button>
        <button id="btn-realistic" type="button">Realistic</button>
      </div>
      <select id="length" class="input">
        <option>30‚Äì45s</option><option selected>60‚Äì90s</option>
      </select>
      <input id="chaos" class="input" placeholder="Optional chaos (e.g., asteroid hits at the end)" style="flex:1"/>
    </div>

    <div class="grid" style="margin-top:16px">
      <div class="preview">
        <div>
          <div style="text-align:center;margin-bottom:8px">Preview (video coming later)</div>
          <div id="players">
            <div class="audio-row"><b>Chad:</b> <audio id="chadPlayer" controls></audio></div>
            <div class="audio-row"><b>Ronnie:</b> <audio id="ronniePlayer" controls></audio></div>
          </div>
        </div>
      </div>

      <div>
        <div class="card" style="background:transparent;border:1px dashed #2b2b31">
          <b>Output (script)</b>
          <pre id="output" style="margin-top:8px">Your generated script will appear here.</pre>
        </div>
        <div class="row" style="margin-top:12px;justify-content:space-between">
          <span id="status" class="small">Ready.</span>
          <button id="btn-generate" class="button">Generate</button>
        </div>
      </div>
    </div>
  </section>
</main>

<script>
(function(){
  const el = (id) => document.getElementById(id);
  const topicEl = el('topic'), chaosEl = el('chaos'), lengthEl = el('length');
  const outEl = el('output'), statusEl = el('status'), btnGen = el('btn-generate');
  const chadPlayer = el('chadPlayer'), ronniePlayer = el('ronniePlayer');
  let mode = 'animated';
  el('btn-animated').onclick = () => { mode='animated'; event.target.classList.add('active'); el('btn-realistic').classList.remove('active'); };
  el('btn-realistic').onclick = () => { mode='realistic'; event.target.classList.add('active'); el('btn-animated').classList.remove('active'); };

  async function b64ToUrl(b64, mime){ const bin = atob(b64); const buf = new Uint8Array(bin.length); for(let i=0;i<bin.length;i++) buf[i]=bin.charCodeAt(i); return URL.createObjectURL(new Blob([buf],{type:mime})); }

  btnGen.onclick = async () => {
    const topic = topicEl.value.trim() || 'beer talk';
    const chaos = chaosEl.value.trim();
    const length = lengthEl.value || '60‚Äì90s';
    statusEl.textContent = 'Writing script...';

    // 1) SCRIPT
    const g = await fetch('/.netlify/functions/generate', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ topic, chaos, length })
    });
    const gJ = await g.json();
    const script = gJ.script || 'Chad: ‚Ä¶\nRonnie: ‚Ä¶';
    outEl.textContent = script;

    // 2) SPLIT LINES
    const chadText   = (script.match(/^Chad:.*$/gm)   || []).join(' ');
    const ronnieText = (script.match(/^Ronnie:.*$/gm) || []).join(' ');

    // 3) TTS (CHAD & RONNIE)
    statusEl.textContent = 'Generating voices...';
    const [chadRes, ronnieRes] = await Promise.all([
      fetch('/.netlify/functions/tts', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ text: chadText, voiceId: 'CHAD_VOICE_ID' }) }),
      fetch('/.netlify/functions/tts', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ text: ronnieText, voiceId: 'RONNIE_VOICE_ID' }) })
    ]);
    const chadData = await chadRes.json();
    const ronnieData = await ronnieRes.json();

    // 4) PREVIEW AUDIO LOCALLY
    if (chadData.audioBase64) chadPlayer.src = await b64ToUrl(chadData.audioBase64, chadData.mime || 'audio/mpeg');
    if (ronnieData.audioBase64) ronniePlayer.src = await b64ToUrl(ronnieData.audioBase64, ronnieData.mime || 'audio/mpeg');

    statusEl.textContent = 'Voices ready. (Video coming next)';
  };
})();
</script>
</body>
</html>
[build]
  publish = "."
  functions = "netlify/functions"
export async function handler(event) {
  try {
    const { topic, chaos, length } = JSON.parse(event.body || "{}");
    const prompt = `Write a ${length||'60-90s'} comedic dialogue between Chad (buzzed bro) and Ronnie (skeptical conspiracy guy) about: ${topic}.
Include a final beat where: ${chaos || 'the neon sign buzzes'}. Keep it spicy but safe for TikTok/IG.`;

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: "You are a comedic scriptwriter." },
          { role: "user", content: prompt }
        ],
        temperature: 0.9
      })
    });

    const j = await r.json();
    const script = j?.choices?.[0]?.message?.content || "Chad: ‚Ä¶\nRonnie: ‚Ä¶";
    return { statusCode: 200, body: JSON.stringify({ script }) };

  } catch (e) {
    return { statusCode: 500, body: JSON.stringify({ error: e.message }) };
  }
}
export async function handler(event) {
  try {
    const { text, voiceId } = JSON.parse(event.body || "{}");
    if (!text) return { statusCode: 400, body: JSON.stringify({ error: "Missing text" }) };
    if (!voiceId) return { statusCode: 400, body: JSON.stringify({ error: "Missing voiceId" }) };

    const r = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
      method: "POST",
      headers: { "xi-api-key": process.env.ELEVEN_API_KEY, "Content-Type": "application/json" },
      body: JSON.stringify({
        text,
        model_id: "eleven_monolingual_v1",
        voice_settings: { stability: 0.5, similarity_boost: 0.85 }
      })
    });

    // Most ElevenLabs endpoints return audio bytes. Forward as base64 for browser preview.
    const buf = await r.arrayBuffer();
    const b64 = Buffer.from(buf).toString("base64");
    return { statusCode: 200, body: JSON.stringify({ audioBase64: b64, mime: "audio/mpeg" }) };

  } catch (e) {
    return { statusCode: 500, body: JSON.stringify({ error: e.message }) };
  }
}
export async function handler(event) {
  try {
    return { statusCode: 200, body: JSON.stringify({ videoUrl: null, note: "Wire your avatar provider here later." }) };
  } catch (e) {
    return { statusCode: 500, body: JSON.stringify({ error: e.message }) };
  }
}
